---
# file: tasks/main.yml

- name: Install ckan dependencies
  apt: name={{ item }} update_cache=yes state=latest
  with_items:
    - git-core
    - libpq-dev
    - python-dev
    - python-pip
    - python-virtualenv

- name: Upgrade python-pip
  command: pip install --upgrade pip

- name: Create ckan system user account
  when: ckan_user is defined
  user: name={{ ckan_user.name }} system={{ ckan_user.system }} createhome=yes home={{ ckan_user.home_path }} shell={{ ckan_user.shell }} comment="{{ckan_user.description}}"

- name: Install ckan
  sudo_user: "{{ ckan_user.name }}"
  pip: name="git+https://github.com/okfn/ckan.git@ckan-{{ ckan_version }}#egg=ckan" virtualenv={{ ckan_virtualenv }}

- name:  Install ckan python modules
  sudo_user: "{{ ckan_user.name }}"
  pip: requirements="{{ ckan_virtualenv }}/src/ckan/requirements.txt" virtualenv={{ ckan_virtualenv }}

- name: Create ckan postgresql user
  sudo_user: postgres
  postgresql_user: name={{ ckan_db.username }} password={{ ckan_db.password }}

- name: Create ckan postgresql database
  sudo_user: postgres
  postgresql_db: name={{ ckan_db.dbname }} encoding='UTF-8' template='template0' owner={{ ckan_db.username }}

- name: Create ckan config dir.
  file: path={{ ckan_conf_dir }} owner={{ ckan_user.name }} group={{ ckan_user.name }} mode=0755 state=directory

# NOTE: Add production.ini template
- name: Copy ckan production.ini config file
  template: src="production-{{ ckan_version }}.ini.j2" dest="{{ ckan_conf_dir }}/production.ini" owner={{ ckan_user.name }} group={{ ckan_user.name }} mode=0644
  notify: reload apache2

- name: Generate beaker secret token
  command: "{{ ckan_virtualenv }}/bin/python -c 'from paste.script.util import secret; print secret.secret_string()'"
  register: beaker_secret_token

- name: Set beaker.session.secret in production.ini
  lineinfile: regexp="^beaker\.session\.secret\ =$" line="beaker.session.secret = {{ beaker_secret_token.stdout }}" dest="{{ ckan_conf_dir }}/production.ini" backrefs=yes state=present
  when: beaker_secret_token is defined

- name: Generate ckan aplication instance UUID
  command: "{{ ckan_virtualenv }}/bin/python -c 'from paste.script.util import uuid; print uuid.uuid4()'"
  register: app_instance_uuid

- name: Set app_instance_uuid in production.ini
  lineinfile: regexp="^app_instance_uuid =$" line="app_instance_uuid = {{ app_instance_uuid.stdout }}" dest="{{ ckan_conf_dir }}/production.ini" backrefs=yes state=present
  when: app_instance_uuid is defined

- name: Symlink who.ini to ckan config. dir
  file: src="{{ ckan_virtualenv }}/src/ckan/who.ini" dest="{{ ckan_conf_dir }}/who.ini" owner={{ ckan_user.name }} group={{ ckan_user.name }} state=link

# vim: set sw=2 ts=2:
